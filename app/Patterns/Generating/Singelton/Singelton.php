<?php

namespace Patterns\Generating\Singelton;
/**
 * Класс Одиночка предоставляет метод `GetInstance`, который ведёт себя как
 * альтернативный конструктор и позволяет клиентам получать один и тот же
 * экземпляр класса при каждом вызове.
 */
class Singelton
{
    /**
     * Объект одиночки храниться в статичном поле класса. Это поле — массив, так
     * как мы позволим нашему Одиночке иметь подклассы. Все элементы этого
     * массива будут экземплярами кокретных подклассов Одиночки. Не волнуйтесь,
     * мы вот-вот познакомимся с тем, как это работает.
     */
    private static $instances = [];

    /**
     * Конструктор Одиночки всегда должен быть скрытым, чтобы предотвратить
     * создание объекта через оператор new.
     */
    protected function __construct()
    {

    }
    /**
     * Одиночки не должны быть клонируемыми.
     */
    protected function __clone(){

    }
    /**
     * Одиночки не должны быть восстанавливаемыми из строк.
     */
    public function __wakeup(){

    }

    public static function getInstance():Singelton
    {
        $cli = static::class;
        if(!isset(self::$instances[$cli]))
        {
            self::$instances[$cli] = new static();
        }

        return self::$instances[$cli];
    }

    /**
     * Наконец, любой одиночка должен содержать некоторую бизнес-логику, которая
     * может быть выполнена на его экземпляре.
     */
    public function someBusinessLogic()
    {
        // ...
    }
}